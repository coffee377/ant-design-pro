{"version":3,"sources":["src/pages/list/search/projects/model.ts","src/pages/list/search/projects/service.ts"],"names":["_service","__webpack_require__","Model","namespace","state","list","effects","fetch","_regenerator","default","mark","_ref","_ref2","payload","call","put","response","wrap","_context","prev","next","queryFakeList","sent","type","Array","isArray","stop","reducers","queryList","action","_objectSpread2","_request","_interopRequireDefault","_callee","params","abrupt"],"mappings":"sNAIAA,EAAAC,EAAA,QAsBMC,GACJC,UAAW,qBAEXC,OACEC,SAGFC,SACGC,MADMC,EAAAC,QAAAC,KAAA,SAAAH,EAAAI,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,QAAAQ,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEY,OADVP,EADFF,EACEE,QAAaC,EADfF,EACeE,KAAMC,EADrBH,EACqBG,IADrBG,EAAAE,KAAA,EAEkBN,EAAKd,EAAAqB,cAAeR,GAFtC,OAGL,OADMG,EAFDE,EAAAI,KAAAJ,EAAAE,KAAA,EAGCL,GACJQ,KAAM,YACNV,QAASW,MAAMC,QAAQT,GAAYA,OALhC,wBAAAE,EAAAQ,SAAAnB,MAUToB,UACEC,UADQ,SACExB,EAAOyB,GACf,SAAAC,EAAArB,YACKL,GACHC,KAAMwB,EAAOhB,eAMNX,sKCrDf6B,EAAAC,EAAA/B,EAAA,kBAEsBoB,uFAAf,SAAAY,EAA6BC,GAA7B,OAAA1B,EAAAC,QAAAQ,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAiB,OAAA,UACE,EAAAJ,EAAAtB,SAAQ,kBACbyB,YAFG,wBAAAhB,EAAAQ,SAAAO","file":"p__list__search__projects__model.ts.f2168ca9.async.js","sourcesContent":["import { AnyAction, Reducer } from 'redux';\n\nimport { EffectsCommandMap } from 'dva';\nimport { ListItemDataType } from './data.d';\nimport { queryFakeList } from './service';\n\nexport interface StateType {\n  list: ListItemDataType[];\n}\n\nexport type Effect = (\n  action: AnyAction,\n  effects: EffectsCommandMap & { select: <T>(func: (state: StateType) => T) => T },\n) => void;\n\nexport interface ModelType {\n  namespace: string;\n  state: StateType;\n  effects: {\n    fetch: Effect;\n  };\n  reducers: {\n    queryList: Reducer<StateType>;\n  };\n}\n\nconst Model: ModelType = {\n  namespace: 'listSearchProjects',\n\n  state: {\n    list: [],\n  },\n\n  effects: {\n    *fetch({ payload }, { call, put }) {\n      const response = yield call(queryFakeList, payload);\n      yield put({\n        type: 'queryList',\n        payload: Array.isArray(response) ? response : [],\n      });\n    },\n  },\n\n  reducers: {\n    queryList(state, action) {\n      return {\n        ...state,\n        list: action.payload,\n      };\n    },\n  },\n};\n\nexport default Model;\n","import request from '@/utils/request';\n\nexport async function queryFakeList(params: { count: number }) {\n  return request('/api/fake_list', {\n    params,\n  });\n}\n"],"sourceRoot":""}