{"version":3,"sources":["src/pages/form/step-form/service.ts","src/pages/form/step-form/model.ts"],"names":["_request","_interopRequireDefault","__webpack_require__","fakeSubmitForm","_callee","params","_regenerator","default","wrap","_context","prev","next","abrupt","method","data","stop","_service","Model","namespace","state","current","step","payAccount","receiverAccount","receiverName","amount","effects","submitStepForm","mark","_ref","_ref2","payload","call","put","type","reducers","saveCurrentStep","_ref3","_objectSpread2","saveStepFormData","_ref4"],"mappings":"wNAAAA,EAAAC,EAAAC,EAAA,kBAEsBC,uFAAf,SAAAC,EAA8BC,GAA9B,OAAAC,EAAAC,QAAAC,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,UACE,EAAAZ,EAAAO,SAAQ,cACbM,OAAQ,OACRC,KAAMT,KAHH,wBAAAI,EAAAM,SAAAX,sLCCPY,EAAAd,EAAA,QA6BMe,GACJC,UAAW,eAEXC,OACEC,QAAS,OACTC,MACEC,WAAY,wBACZC,gBAAiB,mBACjBC,aAAc,OACdC,OAAQ,QAIZC,SACGC,eADMrB,EAAAC,QAAAqB,KAAA,SAAAD,EAAAE,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAA3B,EAAAC,QAAAC,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEL,OADgBoB,EADXF,EACWE,QAAaC,EADxBF,EACwBE,KAAMC,EAD9BH,EAC8BG,IAD9BxB,EAAAE,KAAA,EAECqB,EAAKhB,EAAAb,eAAgB4B,GAFtB,OAGL,OAHKtB,EAAAE,KAAA,EAGCsB,GACJC,KAAM,mBACNH,YALG,OAOL,OAPKtB,EAAAE,KAAA,EAOCsB,GACJC,KAAM,kBACNH,QAAS,WATN,wBAAAtB,EAAAM,SAAAY,MAcTQ,UACEC,gBADQ,SACQjB,EADRkB,GAC0B,IAATN,EAASM,EAATN,QACvB,SAAAO,EAAA/B,YACKY,GACHC,QAASW,KAIbQ,iBARQ,SAQSpB,EARTqB,GAQ2B,IAATT,EAASS,EAATT,QACxB,SAAAO,EAAA/B,YACKY,GACHE,MAAI,EAAAiB,EAAA/B,YACEY,EAAoBE,KACrBU,UAOEd","file":"p__form__step-form__model.ts.75acc5cb.async.js","sourcesContent":["import request from '@/utils/request';\n\nexport async function fakeSubmitForm(params: any) {\n  return request('/api/forms', {\n    method: 'POST',\n    data: params,\n  });\n}\n","import { AnyAction, Reducer } from 'redux';\n\nimport { EffectsCommandMap } from 'dva';\nimport { fakeSubmitForm } from './service';\n\nexport interface StateType {\n  current?: string;\n  step?: {\n    payAccount: string;\n    receiverAccount: string;\n    receiverName: string;\n    amount: string;\n  };\n}\n\nexport type Effect = (\n  action: AnyAction,\n  effects: EffectsCommandMap & { select: <T>(func: (state: StateType) => T) => T },\n) => void;\n\nexport interface ModelType {\n  namespace: string;\n  state: StateType;\n  effects: {\n    submitStepForm: Effect;\n  };\n  reducers: {\n    saveStepFormData: Reducer<StateType>;\n    saveCurrentStep: Reducer<StateType>;\n  };\n}\n\nconst Model: ModelType = {\n  namespace: 'formStepForm',\n\n  state: {\n    current: 'info',\n    step: {\n      payAccount: 'ant-design@alipay.com',\n      receiverAccount: 'test@example.com',\n      receiverName: 'Alex',\n      amount: '500',\n    },\n  },\n\n  effects: {\n    *submitStepForm({ payload }, { call, put }) {\n      yield call(fakeSubmitForm, payload);\n      yield put({\n        type: 'saveStepFormData',\n        payload,\n      });\n      yield put({\n        type: 'saveCurrentStep',\n        payload: 'result',\n      });\n    },\n  },\n\n  reducers: {\n    saveCurrentStep(state, { payload }) {\n      return {\n        ...state,\n        current: payload,\n      };\n    },\n\n    saveStepFormData(state, { payload }) {\n      return {\n        ...state,\n        step: {\n          ...(state as StateType).step,\n          ...payload,\n        },\n      };\n    },\n  },\n};\n\nexport default Model;\n"],"sourceRoot":""}