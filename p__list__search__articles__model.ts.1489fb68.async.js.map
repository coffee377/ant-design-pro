{"version":3,"sources":["src/pages/list/search/articles/service.ts","src/pages/list/search/articles/model.ts"],"names":["_request","_interopRequireDefault","__webpack_require__","queryFakeList","_callee","params","_regenerator","default","wrap","_context","prev","next","abrupt","stop","_service","Model","namespace","state","list","effects","fetch","mark","_ref","_ref2","payload","call","put","response","sent","type","Array","isArray","appendFetch","_ref3","_ref4","_context2","reducers","queryList","action","_objectSpread2","appendList","concat"],"mappings":"uNAAAA,EAAAC,EAAAC,EAAA,kBAGsBC,uFAAf,SAAAC,EAA6BC,GAA7B,OAAAC,EAAAC,QAAAC,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,UACE,EAAAZ,EAAAO,SAAQ,kBACbF,YAFG,wBAAAI,EAAAI,SAAAT,sLCCPU,EAAAZ,EAAA,QAwBMa,GACJC,UAAW,qBAEXC,OACEC,SAGFC,SACGC,MADMd,EAAAC,QAAAc,KAAA,SAAAD,EAAAE,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAArB,EAAAC,QAAAC,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEY,OADVa,EADFF,EACEE,QAAaC,EADfF,EACeE,KAAMC,EADrBH,EACqBG,IADrBjB,EAAAE,KAAA,EAEkBc,EAAKX,EAAAX,cAAeqB,GAFtC,OAGL,OADMG,EAFDlB,EAAAmB,KAAAnB,EAAAE,KAAA,EAGCe,GACJG,KAAM,YACNL,QAASM,MAAMC,QAAQJ,GAAYA,OALhC,wBAAAlB,EAAAI,SAAAO,KAQNY,YARM1B,EAAAC,QAAAc,KAAA,SAAAW,EAAAC,EAAAC,GAAA,IAAAV,EAAAC,EAAAC,EAAAC,EAAA,OAAArB,EAAAC,QAAAC,KAAA,SAAA2B,GAAA,eAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OASY,OADJa,EARRS,EAQQT,QAAaC,EARrBS,EAQqBT,KAAMC,EAR3BQ,EAQ2BR,IAR3BS,EAAAxB,KAAA,EASkBc,EAAKX,EAAAX,cAAeqB,GATtC,OAUL,OADMG,EATDQ,EAAAP,KAAAO,EAAAxB,KAAA,EAUCe,GACJG,KAAM,aACNL,QAASM,MAAMC,QAAQJ,GAAYA,OAZhC,wBAAAQ,EAAAtB,SAAAmB,MAiBTI,UACEC,UADQ,SACEpB,EAAOqB,GACf,SAAAC,EAAAhC,YACKU,GACHC,KAAMoB,EAAOd,WAGjBgB,WAPQ,SAOGvB,EAAOqB,GAChB,SAAAC,EAAAhC,YACKU,GACHC,KAAOD,EAAoBC,KAAKuB,OAAOH,EAAOd,gBAMvCT","file":"p__list__search__articles__model.ts.1489fb68.async.js","sourcesContent":["import request from '@/utils/request';\nimport { ListItemDataType } from './data.d';\n\nexport async function queryFakeList(params: ListItemDataType) {\n  return request('/api/fake_list', {\n    params,\n  });\n}\n","import { AnyAction, Reducer } from 'redux';\n\nimport { EffectsCommandMap } from 'dva';\nimport { ListItemDataType } from './data.d';\nimport { queryFakeList } from './service';\n\nexport interface StateType {\n  list: ListItemDataType[];\n}\n\nexport type Effect = (\n  action: AnyAction,\n  effects: EffectsCommandMap & { select: <T>(func: (state: StateType) => T) => T },\n) => void;\n\nexport interface ModelType {\n  namespace: string;\n  state: StateType;\n  effects: {\n    fetch: Effect;\n    appendFetch: Effect;\n  };\n  reducers: {\n    queryList: Reducer<StateType>;\n    appendList: Reducer<StateType>;\n  };\n}\n\nconst Model: ModelType = {\n  namespace: 'listSearchArticles',\n\n  state: {\n    list: [],\n  },\n\n  effects: {\n    *fetch({ payload }, { call, put }) {\n      const response = yield call(queryFakeList, payload);\n      yield put({\n        type: 'queryList',\n        payload: Array.isArray(response) ? response : [],\n      });\n    },\n    *appendFetch({ payload }, { call, put }) {\n      const response = yield call(queryFakeList, payload);\n      yield put({\n        type: 'appendList',\n        payload: Array.isArray(response) ? response : [],\n      });\n    },\n  },\n\n  reducers: {\n    queryList(state, action) {\n      return {\n        ...state,\n        list: action.payload,\n      };\n    },\n    appendList(state, action) {\n      return {\n        ...state,\n        list: (state as StateType).list.concat(action.payload),\n      };\n    },\n  },\n};\n\nexport default Model;\n"],"sourceRoot":""}