{"version":3,"sources":["src/pages/account/settings/service.ts","src/pages/account/settings/model.ts"],"names":["_request","_interopRequireDefault","__webpack_require__","queryCurrent","_callee","_regenerator","default","wrap","_context","prev","next","abrupt","stop","queryProvince","_callee2","_context2","queryCity","_callee3","province","_context3","concat","query","_callee4","_context4","_service","Model","namespace","state","currentUser","city","isLoading","effects","fetch","mark","_","_ref","call","put","response","sent","type","payload","fetchCurrent","_ref2","fetchProvince","_ref3","fetchCity","_ref4","_ref5","reducers","saveCurrentUser","action","_objectSpread2","changeNotifyCount","arguments","length","undefined","notifyCount","totalCount","unreadCount","setProvince","setCity","changeLoading"],"mappings":"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","file":"p__account__settings__model.ts.78eeebf1.async.js","sourcesContent":["import request from '@/utils/request';\n\nexport async function queryCurrent() {\n  return request('/api/currentUser');\n}\n\nexport async function queryProvince() {\n  return request('/api/geographic/province');\n}\n\nexport async function queryCity(province: string) {\n  return request(`/api/geographic/city/${province}`);\n}\n\nexport async function query() {\n  return request('/api/users');\n}\n","import { AnyAction, Reducer } from 'redux';\nimport { EffectsCommandMap } from 'dva';\nimport { CurrentUser, GeographicItemType } from './data.d';\nimport { queryCity, queryCurrent, queryProvince, query as queryUsers } from './service';\n\nexport interface ModalState {\n  currentUser?: Partial<CurrentUser>;\n  province?: GeographicItemType[];\n  city?: GeographicItemType[];\n  isLoading?: boolean;\n}\n\nexport type Effect = (\n  action: AnyAction,\n  effects: EffectsCommandMap & { select: <T>(func: (state: ModalState) => T) => T },\n) => void;\n\nexport interface ModelType {\n  namespace: string;\n  state: ModalState;\n  effects: {\n    fetchCurrent: Effect;\n    fetch: Effect;\n    fetchProvince: Effect;\n    fetchCity: Effect;\n  };\n  reducers: {\n    saveCurrentUser: Reducer<ModalState>;\n    changeNotifyCount: Reducer<ModalState>;\n    setProvince: Reducer<ModalState>;\n    setCity: Reducer<ModalState>;\n    changeLoading: Reducer<ModalState>;\n  };\n}\n\nconst Model: ModelType = {\n  namespace: 'accountSettings',\n\n  state: {\n    currentUser: {},\n    province: [],\n    city: [],\n    isLoading: false,\n  },\n\n  effects: {\n    *fetch(_, { call, put }) {\n      const response = yield call(queryUsers);\n      yield put({\n        type: 'save',\n        payload: response,\n      });\n    },\n    *fetchCurrent(_, { call, put }) {\n      const response = yield call(queryCurrent);\n      yield put({\n        type: 'saveCurrentUser',\n        payload: response,\n      });\n    },\n    *fetchProvince(_, { call, put }) {\n      yield put({\n        type: 'changeLoading',\n        payload: true,\n      });\n      const response = yield call(queryProvince);\n      yield put({\n        type: 'setProvince',\n        payload: response,\n      });\n    },\n    *fetchCity({ payload }, { call, put }) {\n      const response = yield call(queryCity, payload);\n      yield put({\n        type: 'setCity',\n        payload: response,\n      });\n    },\n  },\n\n  reducers: {\n    saveCurrentUser(state, action) {\n      return {\n        ...state,\n        currentUser: action.payload || {},\n      };\n    },\n    changeNotifyCount(state = {}, action) {\n      return {\n        ...state,\n        currentUser: {\n          ...state.currentUser,\n          notifyCount: action.payload.totalCount,\n          unreadCount: action.payload.unreadCount,\n        },\n      };\n    },\n    setProvince(state, action) {\n      return {\n        ...state,\n        province: action.payload,\n      };\n    },\n    setCity(state, action) {\n      return {\n        ...state,\n        city: action.payload,\n      };\n    },\n    changeLoading(state, action) {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    },\n  },\n};\n\nexport default Model;\n"],"sourceRoot":""}